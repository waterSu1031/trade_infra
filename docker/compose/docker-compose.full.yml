version: '3.8'

# This compose file includes all infrastructure services including monitoring and logging
# Use this for complete infrastructure setup

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: trade_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: trade_db
      POSTGRES_USER: trade_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-trade_pass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - trade_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trade_user -d trade_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trade_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - trade_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ../../../trade_dashboard
      dockerfile: Dockerfile
    container_name: trade_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://trade_user:${DB_PASSWORD:-trade_pass}@db:5432/trade_db
      REDIS_URL: redis://redis:6379
      IB_HOST: ${IB_HOST:-host.docker.internal}
      IB_PORT: ${IB_PORT:-7497}
      IB_CLIENT_ID: ${IB_CLIENT_ID:-1}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trade_network
    volumes:
      - ../../../trade_dashboard/trading.db:/app/trading.db
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Frontend
  frontend:
    build:
      context: ../../../trade_frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000}
    container_name: trade_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
      VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - trade_network

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ../proxy/nginx
      dockerfile: Dockerfile
    container_name: trade_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../proxy/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - trade_network

  # Prometheus
  prometheus:
    build:
      context: ../monitoring/prometheus
      dockerfile: Dockerfile
    container_name: trade_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - trade_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana
  grafana:
    build:
      context: ../monitoring/grafana
      dockerfile: Dockerfile
    container_name: trade_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - trade_network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}

  # Elasticsearch
  elasticsearch:
    build:
      context: ../logging/elasticsearch
      dockerfile: Dockerfile
    container_name: trade_elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - trade_network
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: trade_postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://trade_user:${DB_PASSWORD:-trade_pass}@db:5432/trade_db?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - trade_network
    depends_on:
      - db

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: trade_redis_exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis://redis:6379"
    ports:
      - "9121:9121"
    networks:
      - trade_network
    depends_on:
      - redis

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: trade_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - trade_network
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  trade_network:
    driver: bridge